<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><path xmlns="http://www.w3.org/2000/svg" d="m196 512c44.242188 0 78.496094-4.234375 105.972656-12.890625-.582031-3.125-.972656-6.320313-.972656-9.609375 0-14.695312 6.109375-27.960938 15.875-37.5-9.765625-9.539062-15.875-22.804688-15.875-37.5s6.109375-27.960938 15.875-37.5c-9.765625-9.539062-15.875-22.804688-15.875-37.5s6.109375-27.960938 15.875-37.5c-9.765625-9.539062-15.875-22.804688-15.875-37.5 0-17.359375 8.570312-32.660156 21.597656-42.222656-8.921875-8.167969-18.453125-15.488282-28.453125-21.929688 4.0625-5.117187 6.855469-11.308594 6.855469-18.347656 0-16.570312-13.429688-30-30-30h-150c-16.570312 0-30 13.429688-30 30 0 7.023438 2.785156 13.195312 6.824219 18.304688-58.234375 37.515624-97.824219 105.449218-97.824219 176.695312 0 121.011719 112.285156 135 196 135zm-.160156-145.605469c-24.816406 0-45-20.183593-45-45 0-19.589843 12.65625-36.117187 30.160156-42.285156v-22.109375c0-8.289062 6.710938-15 15-15s15 6.710938 15 15v22.210938c17.339844 6.253906 29.839844 22.714843 29.839844 42.183593 0 8.292969-6.710938 15-15 15-8.292969 0-15-6.707031-15-15 0-8.277343-6.726563-15-15-15-8.277344 0-15 6.722657-15 15 0 8.277344 6.722656 15 15 15 24.8125 0 45 20.1875 45 45 0 19.46875-12.5 35.929688-29.839844 42.1875v13.417969c0 8.289062-6.710938 15-15 15s-15-6.710938-15-15v-13.320312c-17.503906-6.164063-30.160156-22.695313-30.160156-42.285157 0-8.289062 6.707031-15 15-15 8.289062 0 15 6.710938 15 15 0 8.277344 6.722656 15 15 15 8.273437 0 15-6.722656 15-15 0-8.277343-6.726563-15-15-15zm0 0" fill="#9958c5" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m489.5 467h-136c-12.425781 0-22.5 10.074219-22.5 22.5s10.074219 22.5 22.5 22.5h136c12.425781 0 22.5-10.074219 22.5-22.5s-10.074219-22.5-22.5-22.5zm0 0" fill="#9958c5" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m489.5 392h-136c-12.425781 0-22.5 10.074219-22.5 22.5s10.074219 22.5 22.5 22.5h136c12.425781 0 22.5-10.074219 22.5-22.5s-10.074219-22.5-22.5-22.5zm0 0" fill="#9958c5" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m489.5 317h-136c-12.425781 0-22.5 10.074219-22.5 22.5s10.074219 22.5 22.5 22.5h136c12.425781 0 22.5-10.074219 22.5-22.5s-10.074219-22.5-22.5-22.5zm0 0" fill="#9958c5" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m489.5 242h-136c-12.425781 0-22.5 10.074219-22.5 22.5s10.074219 22.5 22.5 22.5h136c12.425781 0 22.5-10.074219 22.5-22.5s-10.074219-22.5-22.5-22.5zm0 0" fill="#9958c5" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m238.238281 30c-6.214843-17.421875-22.707031-30-42.238281-30-19.554688 0-36.238281 12.539062-42.4375 30h-47.5625c-4.820312 0-9.347656 2.3125-12.171875 6.226562-2.8125 3.910157-3.589844 8.949219-2.050781 13.519532l23.417968 72.253906h161.613282l23.414062-72.253906c1.539063-4.570313.761719-9.609375-2.050781-13.519532-2.824219-3.914062-7.351563-6.226562-12.171875-6.226562zm0 0" fill="#9958c5" data-original="#000000" style="" class=""/><script/></g></svg>
