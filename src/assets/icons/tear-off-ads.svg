<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><g xmlns="http://www.w3.org/2000/svg"><path d="m481.687 0h-451.374c-12.491 0-22.653 10.162-22.653 22.652v285.876c0 11.07 8.355 20.226 19.09 21.493v166.397c0 8.592 6.989 15.581 15.581 15.581h73.236c8.592 0 15.582-6.989 15.582-15.581v-166.247h13.634v166.248c0 8.592 6.989 15.581 15.581 15.581h73.237c8.592 0 15.581-6.989 15.581-15.581v-166.248h13.635v17.505c0 6.921 5.63 12.551 12.551 12.551h13.867l7.896 12.542c2.301 3.657 7.226 4.625 10.737 2.085l20.258-14.627h26.54c6.921 0 12.551-5.63 12.551-12.551v-17.505h13.634v74.617c0 8.592 6.99 15.582 15.582 15.582h43.754c6.363 0 11.541-5.178 11.541-11.541v-31.064l4.519 2.358c3.629 1.895 8.107.527 10.061-3.069l18.034-33.201c.597-1.099.909-2.33.909-3.58v-10.251c10.734-1.268 19.09-10.423 19.09-21.493v-285.877c-.001-12.49-10.163-22.652-22.654-22.652zm7.653 308.528c0 3.663-2.979 6.643-6.643 6.643-2.899 0-5.45 0-8.349 0-4.143 0-7.5 3.357-7.5 7.5 0 2.629 1.354 4.938 3.401 6.277v9.419l-13.604 25.045-8.949-4.67c-4.985-2.603-10.97 1.024-10.97 6.649v39.979h-40.295c-.321 0-.582-.261-.582-.582v-74.617h4.498c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5c-13.079 0-30.743 0-44.031 0-4.143 0-7.5 3.357-7.5 7.5 0 2.628 1.354 4.937 3.399 6.276v16.28h-26.516c-1.576 0-3.112.497-4.391 1.42l-15.744 11.367-5.844-9.282c-1.373-2.182-3.77-3.505-6.347-3.505h-15.559v-15.056h4.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5c-20.659 0-29.946 0-44.034 0-4.143 0-7.5 3.357-7.5 7.5 0 2.628 1.354 4.937 3.399 6.276v167.472c0 .32-.261.581-.581.581h-73.237c-.32 0-.581-.261-.581-.581v-166.248h4.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5c-20.706 0-29.826 0-44.033 0-4.143 0-7.5 3.357-7.5 7.5 0 2.628 1.354 4.937 3.399 6.276v167.472c0 .32-.261.581-.582.581h-73.233c-.32 0-.581-.261-.581-.581v-166.248h4.5c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5c-12.771 0-9.969 0-16.947 0-3.663 0-6.643-2.979-6.643-6.643v-285.876c0-4.22 3.434-7.652 7.653-7.652h451.373c4.22 0 7.653 3.433 7.653 7.652v285.876z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m89.25 315.171h-12c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h12c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m207.283 315.171h-12c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h12c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m325.317 315.171h-12c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h12c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m443.349 315.171h-12c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h12c4.143 0 7.5-3.357 7.5-7.5s-3.358-7.5-7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m441.307 39.142h-370.614c-8.479 0-15.377 6.898-15.377 15.378v99.992c0 8.479 6.898 15.377 15.377 15.377h370.613c8.479 0 15.377-6.898 15.377-15.377v-99.992c.001-8.48-6.898-15.378-15.376-15.378zm.377 115.37c0 .208-.169.377-.377.377h-370.614c-.208 0-.377-.169-.377-.377v-99.992c0-.208.169-.378.377-.378h370.613c.208 0 .377.17.377.378v99.992z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m74.171 212.516h363.658c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-363.658c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m445.329 242.24c0-4.143-3.357-7.5-7.5-7.5h-363.658c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h363.658c4.143 0 7.5-3.357 7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m386.733 271.965h-261.466c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h261.467c4.143 0 7.5-3.357 7.5-7.5s-3.358-7.5-7.501-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m196.983 352.869c-4.143 0-7.5 3.357-7.5 7.5v110.796c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-110.796c0-4.142-3.357-7.5-7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m78.949 352.869c-4.143 0-7.5 3.357-7.5 7.5v110.796c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-110.796c0-4.142-3.357-7.5-7.5-7.5z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m327.82 107.662c-4.567-1.686-8.851-3.51-10.622-4.279-.035-.078-.052-.187-.028-.345.083-.579.666-1.072 1.602-1.354 4.5-1.353 8.915 2.027 9.113 2.183 3.171 2.609 7.86 2.188 10.509-.964 2.665-3.171 2.256-7.901-.915-10.567-3.888-3.268-13.112-8.001-23.034-5.014-6.558 1.976-11.203 7.181-12.122 13.585-1.108 7.712 3.642 13.898 7.909 15.801.24.106 5.961 2.653 12.398 5.028 2.579.951 3.99 2.243 3.865 2.943-.163.916-1.797 2.712-4.834 2.712-5.067 0-7.973-2.771-8.742-3.619-2.782-3.069-7.525-3.301-10.594-.52s-3.302 7.524-.52 10.594c4.922 5.431 12.159 8.545 19.855 8.545 9.798 0 18.041-6.34 19.601-15.075 1.136-6.361-1.702-15.325-13.441-19.654z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m214.987 85.917c-3.301 0-6.098 2.135-7.1 5.098-3.444-1.687-7.312-2.638-11.398-2.638-14.335 0-25.998 11.662-25.998 25.997s11.663 25.998 25.998 25.998c4.086 0 7.954-.951 11.398-2.638 1.002 2.963 3.799 5.098 7.1 5.098 4.143 0 7.5-3.357 7.5-7.5v-41.915c0-4.143-3.357-7.5-7.5-7.5zm-18.498 39.455c-6.064 0-10.998-4.934-10.998-10.998 0-6.063 4.934-10.997 10.998-10.997s10.998 4.934 10.998 10.997c0 6.064-4.933 10.998-10.998 10.998z" fill="#0000ff" data-original="#000000" style="" class=""/><path d="m281.841 66.199c-4.143 0-7.5 3.357-7.5 7.5v16.077c-3.932-2.088-8.412-3.277-13.166-3.277-15.531 0-28.166 12.635-28.166 28.166s12.635 28.167 28.166 28.167c5.15 0 9.977-1.396 14.135-3.819 1.287 2.279 3.727 3.819 6.531 3.819 4.143 0 7.5-3.357 7.5-7.5v-61.633c0-4.142-3.358-7.5-7.5-7.5zm-20.666 61.633c-7.26 0-13.166-5.906-13.166-13.167 0-7.26 5.906-13.166 13.166-13.166s13.166 5.906 13.166 13.166c0 7.261-5.906 13.167-13.166 13.167z" fill="#0000ff" data-original="#000000" style="" class=""/></g><script/></g></svg>
