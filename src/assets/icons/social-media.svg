<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 511.926 511.926" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><path xmlns="http://www.w3.org/2000/svg" d="m439.973 0h-22.01c-9.675 0-9.675 15 0 15h22.01c22.73 0 41.223 18.426 41.223 41.074v173.572c0 22.649-18.492 41.075-41.223 41.075h-24.963c-1.647 0-3.248.542-4.557 1.543l-45.806 35.038v-29.081c0-4.142-3.357-7.5-7.5-7.5h-91.28c-7.475 0-14.659-1.973-20.995-5.724v-84.192c0-15.77-8.032-29.703-20.229-37.946v-86.785c0-22.648 18.493-41.074 41.224-41.074h105.096c9.674 0 9.674-15 0-15h-105.096c-31.002 0-56.224 25.155-56.224 56.074v80.193c-3.434-.82-7.012-1.267-10.694-1.267h-137.296c-25.321 0-45.922 20.548-45.922 45.805v16.195c0 9.674 15 9.674 15 0v-16.195c0-16.986 13.871-30.805 30.922-30.805h137.297c17.051 0 30.923 13.819 30.923 30.805v87.178c-.09.662-.086 1.329 0 1.986v47.712c0 .943-.057 1.882-.142 2.816h-15.467c-17.043 0-31.251 12.301-34.197 28.468-.682.257-1.337.616-1.944 1.084l-33.545 25.901v-19.964c0-4.142-3.357-7.5-7.5-7.5h-75.425c-17.051 0-30.922-13.819-30.922-30.805v-75.681c0-9.674-15-9.674-15 0v75.682c0 25.257 20.601 45.805 45.922 45.805h67.926v27.73c0 6.016 7.305 9.625 12.084 5.937l37.835-29.213v84.375c0 19.125 15.597 34.683 34.767 34.683h46.025v17.501c0 6.014 7.305 9.627 12.083 5.937l30.356-23.438h8.968c19.17 0 34.767-15.559 34.767-34.683v-13.316c0-9.674-15-9.674-15 0v13.316c0 10.854-8.867 19.683-19.767 19.683h-11.527c-1.659 0-3.271.55-4.583 1.563l-20.298 15.671v-9.735c0-4.142-3.357-7.5-7.5-7.5h-53.525c-10.899 0-19.767-8.83-19.767-19.683v-97.134c0-10.854 8.867-19.683 19.767-19.683h97.433c10.899 0 19.767 8.83 19.767 19.683v36.819c0 9.674 15 9.674 15 0v-36.818c0-19.125-15.597-34.683-34.767-34.683h-66.91c.057-.937.086-38.818.086-38.818 6.613 2.659 13.703 4.041 20.995 4.041h83.78v36.76c0 6.001 7.274 9.614 12.057 5.957l55.846-42.717h22.423c31.001 0 56.223-25.155 56.223-56.075v-173.573c-.001-30.919-25.223-56.074-56.224-56.074z" fill="#0000ff" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m371.66 55.412c-9.523-2.431-19.227 5.093-19.227 14.933 0 10.751-3.918 21.112-11.027 29.169l-20.664 23.383c-1.338-2.053-3.65-3.412-6.283-3.412h-40.34c-4.143 0-7.5 3.358-7.5 7.5v90.765c0 4.142 3.357 7.5 7.5 7.5h40.34c3.031 0 5.635-1.801 6.818-4.387 8.167 4.99 17.631 7.688 27.26 7.688h71.292c10.894 0 19.881-9.453 19.37-20.319-.227-4.812.021-69.425.021-70.86 0-10.692-8.699-19.392-19.369-19.392l-37.073-.111 1.535-3.635c7.015-16.613 5.86-35.877-3.086-51.534-2.088-3.658-5.487-6.245-9.567-7.288-4.082-1.042 4.08 1.043 0 0-9.522-2.431 4.08 1.043 0 0zm-64.701 154.838h-25.34v-75.765h25.34zm112.87-77.271c2.422 0 4.392 1.97 4.392 4.392 0 1.427-.015 5.3-.035 10.551-.111 28.992-.185 56.45.029 61.014.078 1.647-.723 2.745-1.207 3.253-.838.878-1.967 1.361-3.179 1.361h-71.292c-8.498 0-16.815-2.945-23.421-8.292l-3.157-2.556v-58.531l30.691-34.729c9.533-10.804 14.783-24.689 14.783-39.098 0-.424.579-.534.771-.204 6.642 11.623 7.498 25.924 2.291 38.257l-5.919 14.019c-.977 2.313-.731 4.96.652 7.054 1.385 2.094 3.725 3.356 6.234 3.364z" fill="#0000ff" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m79.951 260.498c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h22.108l-4.13 24.979c-.676 4.086 2.09 7.947 6.176 8.623.415.069.826.102 1.232.102 3.604 0 6.783-2.605 7.391-6.278l4.534-27.425h18.093l-4.13 24.979c-.676 4.086 2.09 7.947 6.176 8.623.415.069.826.102 1.232.102 3.604 0 6.783-2.605 7.391-6.278l4.534-27.425h30.093c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-27.613l3.025-18.296h24.588c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-22.108l4.13-24.979c.676-4.086-2.09-7.947-6.176-8.623-4.091-.678-7.947 2.09-8.623 6.176l-4.534 27.425h-18.093l4.13-24.979c.676-4.086-2.09-7.947-6.176-8.623-4.096-.678-7.946 2.09-8.623 6.176l-4.534 27.425h-30.093c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h27.613l-3.025 18.296zm42.817-18.296h18.093l-3.025 18.296h-18.093z" fill="#0000ff" data-original="#000000" style="" class=""/><path xmlns="http://www.w3.org/2000/svg" d="m262.89 374.196c-6.056-4.986-14.113-6.953-22.195-4.988-10.357 2.515-20.808 12.197-20.808 28.156 0 9.933 3.625 18.555 11.082 26.359 6.091 6.375 14.881 12.437 28.499 19.657 1.099.583 2.306.874 3.513.874s2.414-.291 3.513-.874c23.758-12.595 39.58-25.24 39.58-46.016 0-16.046-10.822-25.629-21.548-28.008-8.058-1.788-15.87.11-21.636 4.84zm28.183 23.168c0 11.206-7.433 19.493-28.093 30.866-20.66-11.374-28.094-19.661-28.094-30.866 0-8.338 4.828-12.482 9.347-13.58.833-.202 1.725-.316 2.642-.316 3.399 0 7.136 1.57 9.44 6.037 1.313 2.542 3.967 4.118 6.814 4.059 2.859-.057 5.438-1.735 6.647-4.327 2.427-5.202 7.531-6.117 11.499-5.236 4.738 1.049 9.798 5.112 9.798 13.363z" fill="#0000ff" data-original="#000000" style="" class=""/><script/></g></svg>
